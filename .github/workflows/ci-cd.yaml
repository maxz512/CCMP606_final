name: Deploy Patient App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Checkout Code
      uses: actions/checkout@v2

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Step 3: Install dependencies and build the React app
    - name: Install Dependencies and Build Frontend
      working-directory: frontend
      run: |
        npm install
        npm run build

    # Step 4: Set up SSH access to EC2 instance
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

    # Step 5: Deploy React App to EC2
    - name: Deploy React App to EC2
      run: |
        # Copy the built React frontend to EC2 instance
        scp -r frontend/build ec2-user@${{ secrets.EC2_PUBLIC_IP }}:~/CCMP606_final/frontend

        # SSH into EC2 to deploy backend and frontend
        ssh ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          cd ~/CCMP606_final

          # Step 6: Deploy Backend (Start or Restart Backend)
          # Ensure pm2 is running the backend
          if pm2 list | grep -q "patient-backend"; then
            pm2 restart patient-backend
          else
            pm2 start backend/server.js --name "patient-backend"
          fi

          # Step 7: Make sure the frontend is served correctly
          # If you're using Nginx or a similar tool, make sure to serve the frontend from the build folder
          # Example: Deploy the frontend to a location that serves static files, e.g. using Nginx
          # cp -r frontend/build/* /path/to/nginx/html/

        EOF
